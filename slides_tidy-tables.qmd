- we can (barely) cover the most basic functionality

- don't stress -- things snowball

- self-study and self-directed study (increasingly rare but important to be independent scientists)

- you are going to play the creative part of the course as much as I am

- I am working with this data set for the first time ever, just as you are
  - I may have more technical know how to get going, but we're on an equal
  footing as far as the data itself is concerned, and the questions that
  can be asked about it
  
- promise me you'll ask me a question first, before you look up solution

- how I would approach analyzing a new popgen data set (for real, because
you're exercises will be retracing 1:1 my own steps as I worked with the
IBD data for the first time ever)

- experiment, experiment, experiment! R console workflow (read-eval-print-loop)
is incredibly powerful, so take advantage of this!

- the number of things to REALLY know and remember is surprisingly small
  - what distinguish a newbie from an expert is a repetition and experience,
    not the amount of things to remember (I have a horrible memory and remember
    almost nothing unless I did it hundreds of times)
  - every single exercise captures something about my own personal R application
  which I do almost every single day (and I've been writing R for a living for
  many years now)
  
- a set of recipes (not just teaching materials)

- you can look up galeries of ggplot2 figures and reproduce their styles
and approaches on your own data! remember, data is categories and numbers,
it doesn't matter what they show, you can get inspired by anything!


- combine a realworld analysis with a little bit of "handholding" to whomever
needs it, with interactive hands-on work
  - the best way to learn how to program (or do anything, really) is by
  watching an expert do it (and struggle with it! :))
  - this is intended to replicate this experience withing a short timeframe,
  but without blind copy-pasting of solutions
  
- this will sound like an excuse -- but there are sure to be mistakes in my
text, code, solutions -- take this as an opportunity to pay close attention,
inspect and think about every line of code

- if there's ANYTHING you don't understand, please ask -- do not just copy-paste
code blindly, that's the opposite of learning
  - in your daily work you are often forced to do just that -- do something without
  having time to think carefully
  - use this workshop as an opportunity to learn, make mistakes, and struggle
  (and ask questions) in a safe environment where nobody will judge you for
  not knowing an aswer immediately
  - this is absolutely critical -- if you take anything from my "introductory
  slides", it's this point
  
- (un)fortunately, this workshop is designed to be practical, which means:
  1. if we were to only do very introductory easy things, even if you learned
  them to heart... it would still be difficult for you to employ them immediately
  in practice
  2. rather than show only trivial educational examples, many of the things we'll
  be doing and code we'll be writing is 100% research code I used myself
  - please don't worry if things are sometimes overwhelming:
    - always try to understand my code and ask questions
    - don't ever blindly copy things
  
- not going to lie to you -- this still only scratches the surface, Pareto principle
  - but it absolutely, definitely is enough for you to get started
  - and also to keep you going for a while because your familiarity with
  basic will help you tremendously in searching more information, googling, etc.
  
- like with any apprenticeship, the best way to learn is to look over someone
else's shoulder and learn from them
  - kind of hard to do with coding, unless I'd force you to spend five days
  looking at the projector while I'm coding live
  - these exercises are a compromise on that front -- you'll be working through
  practical exercises THAT I MYSELF HAD TO SOLVE RECENTLY, I will leave the
  questions and tasks open... but still provide my solutions which you shouldn't
  ever blindly copy, but think about every single line you type out
  - if something is not clear, please, PLEASE raise your hand and ask me
  - this is the only ONLY way how we can make this work, and how to make this
  workshop useful for you
  - your questions will surely prompt more detailed discussion points, which
  I can then always demonstrate live

# Take home message

It's worth acknowledging that developing code as proper functions, using iteration,
and generally think about solving problems using "proper" program approaches
like that is a lot of work. It might seem that "just copying a bit of code
a couple of times" is easier. In the moment, it actually is.

Except we rarely, if ever, do things only once. We have to come back to old
scripts, update them, or add new steps. Doing this for every single bit of
copy pasted code (sometimes in multiple scripts) is awful, and almost always
results in bugs. Even missing one edit in one copy of a piece of code will
make our results wrong.

**It's always worth investing a bit extra time into extracting repeated
pieces of code into individual functions. It will always result in _less work_
in the long run.**
