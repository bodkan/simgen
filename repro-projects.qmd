# Structuring R projects

## Introduction

You've done a huge amount of programming already. Processing data,
filtering data, annotating data, summarizing data, but also plotting data
using the most powerful tool for scientific visualization _ggplot2_! I
said it before but it's worth repeating again---you have now learned 70% of
all the tools you might need to do data science on a day-to-day basis using R.
This is not an exaggeration.

Sure, you might not remember everything, but remembering comes from
repetition and practice. You've been exposed to the most important concepts, and
you know where to come back for more information when needed later.

---

In this session on reproducibility, we will take things a bit easier.

**Instead
of focusing on specific programming techniques and R functions, we'll go through
guidelines on how to organize (and run) computational projects on a practical
basis---taking _what_ you've learned, and learning _how_ to do it in practice.**

**Specifically, depending on the level of your confidence and comfort
(and whether you have your own data to work with), in this session you will
either:**

1. **take bits of code from previous exercises on IBD and other
data (currently scattered over multiple separate scripts and files), or**

2. *can take your own data, and your own scripts...**

**... and you will learn how to organize them in a structure suitable for
maximizing reproducibility and effectiveness of doing computational research.**

## Exercise 1: Creating a formal R project

So far, you've worked in an "anonymous" RStudio session, with scripts saved
somewhere on your filesystem, disconnected from the data, or with ad hoc
interactive R console session. This is not how reproducible research
should be done to be sustainable over weeks or months of working on a project.
**You need to set up a formal R project and proper project structure by
following the following steps:**

1. Click `File` `->` `New project...`
2. In the new window, click on `New Directory` `->` `New Project`
3. Under `"Directory name"` type in `"simgen-project"` (the name of our course,
and the directory where all project files will be stored). Pick where you
would like to save that directory (this doesn't matter, just put the project
somewhere you can later find it). Check the `"Open in new session"`, leave
the other options related to "git" and "renv" unchecked.

4. Then click on the "Create Project" button.

**This will create a new RStudio window. Your original RStudio window
(where you worked so far) is still open. The task for the following exercises
will be to convert the (probably disorganized) bits of code into a "proper
reproducible R project".**

**Notice the new `simgen-project.Rproj` file that is currently the only file
in your project directory! We will come back to it soon.**


## Exercise 2: Seting up a project file structure

What makes for a good computational project structure? There are endless
possibilities but a **good guidelines are**:

1. **Be consistent** -- put files that "belong together" in the same place (i.e.,
in the same directory). For example, an Excel table shouldn't be saved in a
directory with scripts, a PDF with a plot shouldn't be in a directory with
tables.

2. **Be predictable** -- even a person unfamiliar with your project should be
able to guess where is what just by looking at your folder. Remember, when
you publish your paper or your thesis, you will have to provide all your
data and scripts as supplementary materials, so others should be able to
understand all of them!

---

**Now let's set up an example computational project structure for our IBD data
our ancient DNA metadata** (we'll leave the $f_4$-ratio Neanderthal estimates
for next chapter)**, just like you would do this for a real study.**

**Note:** This is all just an example! Again, as long as you follow the guidelines
numbered above, everything works!

**In the `Files` pane of RStudio, click on `"New Folder"` and create the
following directories in the "root of your project directory
`simgen-project/`":**

1. `code/`
2. `data/`, and within it create directories `raw/` and `processed/`
3. `figures/`
4. `reports/`

**Note:** You can do all this manually, or you can play around with doing it
using code with the incredibly useful function `?dir.create`! For instance, a
single command to do all of the above could be the following.
(If you're curious about the `recursive = TRUE`, look at help of `?dir.create`.)**

```{r}
#| eval: false
dir.create("code/")
dir.create("data/raw", recursive = TRUE)
dir.create("data/processed", recursive = TRUE)
dir.create("figures/")
dir.create("reports/")
```

**When you hit the `"Refresh file listing"` circular arrow button in the top-right
of the `"Files"` pane, you should see all the directories you just created.
Make sure you see them, and not just the `simgen-project.Rproj` file like before!**

## Exercise 3: Building an example reproducible pipeline

**Let's get something out of the way first.**
Of course, if there are a million possible ways how to properly structure a computational
projects (as mentioned above), there are infinite ways how a "reproducible
research pipeline" should be actually organized.

**Obviously, all research projects are different**, they focus on different kinds
of data (archaeological data, ancient DNA sequences, linguistic data, field
observation data, etc.), so naturally they will require different code which
will have to be structured in different ways.

**Still, there are some common workflows which practically every single computational
scientific research study does:**

1. **Data gathering** -- in our IBD and metadata examples, this involved downloading
data from the internet.

2. **Data processing** -- in our case, this involved filtering the data, processing
it to bin individuals based on their ages, joining IBD data with metadata, etc.

3. **Data analysis** -- this involves computing summary statistics, creating figures,
etc.

The dirty secret of many scientific research studies (especially in the "old days")
is that all of these steps are often clumped together in huge scripts, and
its very difficult (even for the author) to sometimes tell where is what.
This can be a big problem, especially if a bug needs to be fixed, a new step
of a processing pipeline needs to be added, etc.

It gets even worse, when after
a long time you come back to a project and need to remember some details about
where in your code is that one line that does something that needs changing!

**Let's demonstrate how you could organize your code in practice, and hopefully
you'll see how investing a bit more time and thinking into properly organizing
code in your research project makes your life a lot easier in the long run**
(and much easier for everyone who might pick up your project later too).

---

### 1. Data gathering

**Create a new R script `File` `->` `New File` `->` `R Script`. Paste the
following code to that script, and then save it as `01_download_data.R` in the
root of your `simgen-project` project directory.**


::: {.callout-note collapse="true" icon=false}
#### Click to see the contents of the script you should create

```{bash}
#| code-fold: true
#| echo: false
cat files/repro/01_download_data.R
```

:::

**Don't copy it without skimming through it and understanding it!**
Do you recognize these commands from our
earlier exercises on _tidyverse_? That example code was a little messy and
random, because it was structured as an _ad hoc_ tutorial. What we're doing
here is showing how to organize computational research properly.

---

**When you have your script `01_download_data.R`, run it by calling
`source("01_download_data.R")` in your R console and observe what happens.
You can also press Cmd/Ctrl + Shift + S --- a very useful shortcut!**

**Then, click through your `"Files"`
panel and look in `data/raw` --- do you see your files?**


**Note:** Notice the `cat("some kind of message\n")` command in the script.
This is  extremely useful for printing log information about a (potentially)
log running process. If you're confused about what it does, write this
into your R console: `cat("Hello friend!\n")`.

---

Creating `01_download_data.R` is a first step towards reproducibility.
Downloading of all data set now happens in a dedicated script, which means:

1. We only have to run it once, and have all data available in `data/raw`
for later use.
2. If we have to include a new data set to be included, we just edit that
script `01_download_data.R` and run it again!
3. Except for running the script top to bottom, we don't do any "manual work".

**This doesn't sound like much, but it's absolutely crucial. Automation
is the most important aspect of reproducible research. Unless something
isn't fully automated, it's not reproducible.**

Now let's move to the next step!

---

### 2. Data processing

**Create a new R script `File` `->` `New File` `->` `R Script`. Add the
following code to that script, and then save it as `02_process_data.R` in the
root of your `simgen-project` project directory.**

::: {.callout-note collapse="true" icon=false}
#### Click to see the contents of the script you should create

```{bash}
#| code-fold: true
#| echo: false
cat files/repro/02_process_data.R
```

:::

**Again, please don't just blindly copy it! Look at the script and try
to recognize the commands from our earlier exercises on _tidyverse_.** You
ran all of this yourself, manually, command-by-command, in the R console.

**When you have your script, close your RStudio.**

...

_Let's pretend that some time passed, you're done for the day and went home._

...

**Find the location of your `simgen-project` directory on your computer,
go to that directory, and then double-click on the R project file
`simgen-project.Rproj`. You'll get your old session back!**

---

**Now press Cmd/Ctrl + Shift + S to run the processing script, and observe what
happens! Then click through your `"Files"` panel and look in `data/processed`
--- do you see your files, process and tidy, ready for analysis?**



---

### 3. Data analysis

Hopefully you're now starting to get an idea about what a well-organized,
reproducible pipeline means. It's about properly structuring the directory
where your project lives, and about partitioning your code into scripts
which represent logical components of your project --- from downloading
data (and saving it to a particular storage location), and processing it
(and again saving it to a proper storage location), and, finally, to answering
research questions based on this data.

Your project structure should now look something like this, ready for science!

```
├── 01_download_data.R           # data fetching code
├── 02_process_data.R            # data processing code
├── code                         # directory for future custom functions
├── data
│   ├── processed                # processed / filter / cleaned data
│   │   ├── ibd_segments.tsv
│   │   ├── ibd_sum.tsv
│   │   └── metadata.tsv
│   └── raw                      # raw unprocessed data
│       ├── ibd_segments.tsv
│       └── metadata.tsv
├── figures                      # location for PDF figures
├── reports                      # location for slides and reports (next section!)
└── simgen-project.Rproj
```

**This is where you'll come in!**


