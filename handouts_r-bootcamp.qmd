
# "R bootcamp" session

# R is the best technology for doing science

## R has an incredible wealth of toolkits

The most famous is the [_tidyverse_](http://tidyverse.org) ecosystem for data science:

<center>![](files/whoami/packages_tidyverse.png){width="30%"}</center>

There are packages for machine learning
([Keras](https://tensorflow.rstudio.com/keras/),
[Tensorflow](http://tensorflow.rstudio.com/)),
spatial packages ([_sf_](https://r-spatial.github.io/sf/), 
[_stars_](https://r-spatial.github.io/stars/)), packages
specific to research fields (genomics, ecology, etc.).
More than [23000](https://cran.r-project.org/web/packages/) packages total.


## How R is typically taught

- Some slides on _"R as a calculator"_ (only half joking)

- Then straight into plotting histograms and computing t-tests

. . .

- R was first created "by statisticians for statisticians" (1991)

  - So this way of teaching R historically makes sense

. . .

- It's not good enough given the reproducibility crisis:

  - Our data is much bigger and more complex than in 1990s
  - 



<!-- Most university courses completely skip "the programming language part" -->

<!-- Usually immediately jump into fitting linear models, running t-tests, plotting data, etc. -->

<!-- . . . -->

<!-- This reinforces the "R is nothing but a calculator language". -->

<!-- . . . -->

<!-- But worse, it treats R and its tools as a blackbox. -->

<!-- . . . -->

<!-- This is a disaster once bugs and issues come in (and they always do when we program)... -->

<!-- ... because how do you troubleshoot a blackbox? -->


## Read-Eval-Print Loop (REPL)

> [...] the user enters expressions (rather than an entire [computer program]),
the REPL evaluates them and displays the results [...] -- Wikipedia

An idea from ancient computers (1964!) with these functions:

1. **read** --- accepts a bit of code from a user (`1 + 2`)
2. **eval** --- evaluates the code (applies `+` on `1` and `2`, yielding `3`)
3. **print** --- prints the result `6` on the screen

Steps 1.-3. repeat in an infinite **loop**, until the program closes.

## R console is a REPL!

Fun fact: R traces its computing heritage to the Lisp computing environment
where the REPL idea actually originated.

From a practical perspective, R console encourages a highly interactive
and incredibly powerful means of computation.

I like to call this _"talking to R"_:

1. You have a hypothesis, a bit of code you want to test, and experiment.
2. You send that little bit of code to the R console.
3. Get a result (a number, a plot, a transformed table)


## RStudio

R is an incredibly powerful programming language, but RStudio is really
why R took over the modern world of data science (since 2011).

RStudio is a so-called Integrative Development Environment (IDE), which
means that it bundles all the tools one needs to do professional-level
programming:

It integrates:

1. A text editor (obviously)
2. A REPL R console
3. 

## Some recommended configuration

- Go to `Tools` `->` `Global Options`
- Under **Workspace** set the following:

<center>![](files/whoami/rstudio_setting1.png)</center>

<br>

<center>This is very important for reproducibility<br>(otherwise it pollutes
your projects and slows down RStudio).</center>

## Useful shortcuts


